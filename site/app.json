[{"name":"app.R","content":"library(shiny)\nlibrary(yaml)\nlibrary(purrr)\nlibrary(here)\n\ndataset <- list()\ndataset$distributions <- yaml::yaml.load_file(\"distributions.yml\")\n\n# new_sev_distr <- function(distr, params) {\n#   structure(\n#     list(\n#       name = distr,\n#       parameters = params\n#     ),\n#     class = \"sev_distr\"\n#   )\n# }\n#\n# #' @tests\n# #'   print(sev_distr(\"pareto1\"))\n# #'\n# #' @export\n# print.sev_distr <- function(x, ...) {\n#   str(x)\n# }\n#\n# #' @import actuar\n# sev_distr <- function(distr) {\n#   if (! distr %in% list_sev_distr())\n#     stop(paste(\"unknown severity distribution\", distr))\n#\n#   params <- dataset$distributions |> purrr::detect(function(x) {\n#     x$name == distr\n#   })\n#   new_sev_distr(distr, params$parameters)\n# }\n#\n# get_distr <- function(distr) {\n#   UseMethod(\"get_distr\")\n# }\n#\n# #' @export\n# get_distr <- function(distr) {\n#   distr[[\"name\"]]\n# }\n#\n# get_params <- function(distr) {\n#   UseMethod(\"get_params\")\n# }\n#\n# #' @export\n# get_params.sev_distr <- function(distr) {\n#   nms <- distr[[\"parameters\"]] |> purrr::map_chr(\"name\")\n#   val <- distr[[\"parameters\"]] |> purrr::map_dbl(\"value\")\n#   setNames(val, nms)\n# }\n#\n# set_params <- function(distr, params) {\n#   UseMethod(\"set_params\")\n# }\n#\n# #' @tests\n# #' mydistr <- sev_distr(\"pareto1\")\n# #' mydistr <- set_params(mydistr, list(min = 9999))\n# #' str(mydistr)\n# #'\n# #' mydistr <- sev_distr(\"pareto1\")\n# #' mydistr <- set_params(mydistr, list(shape = 9999))\n# #' str(mydistr)\n# #'\n# #' mydistr <- sev_distr(\"pareto1\")\n# #' mydistr <- set_params(mydistr, list(foo = 9999))\n# #' str(mydistr)\n# #'\n# #' @export\n# set_params.sev_distr <- function(distr, params) {\n#   purrr::iwalk(params, function(val, nm) {\n#     ind <- purrr::detect_index(distr$parameters, \\(x) x$name == nm)\n#     if (ind > 0)\n#       distr$parameters[[ind]][[\"value\"]] <<- val\n#     else\n#       stop(paste(\"unknown parameter\", nm, \"for distribution\", distr$name))\n#   })\n#   distr\n# }\n#\n# #' @export\n# get_params.character <- function(distr) {\n#   dataset$distributions |>\n#     purrr::detect(function(x) x$name == distr) |>\n#     purrr::pluck(2) |>\n#     purrr::map_chr(\"name\")\n# }\n#\n# get_param_data <- function(distr) {\n#   UseMethod(\"get_param_data\")\n# }\n#\n# #' @export\n# get_param_data.sev_distr <- function(distr) {\n#   distr[[\"parameters\"]] |> purrr::map_dfr(function(x) {\n#     tibble::as_tibble(x)\n#   })\n# }\n#\n# #' @export\n# get_param_data.character <- function(distr) {\n#   dataset$distributions |>\n#     purrr::detect(function(x) x$name == distr) |>\n#     purrr::pluck(2) |>\n#     purrr::map_dfr(function(x) tibble::as_tibble(x))\n# }\n# # get_param_data(\"pareto1\")\n#\n# proba_function <- function(distr, x) {\n#   UseMethod(\"proba_function\")\n# }\n#\n# #' @export\n# proba_function.sev_distr <- function(distr, x) {\n#   fun <- paste0(\"p\", get_distr(distr))\n#   do.call(fun, c(list(q = x), get_params(distr)))\n# }\n#\n# density_function <- function(distr, x) {\n#   UseMethod(\"density_function\")\n# }\n#\n# #' @export\n# density_function <- function(distr, x) {\n#   fun <- paste0(\"d\", get_distr(distr))\n#   do.call(fun, c(list(x = x), get_params(distr)))\n# }\n#\n# raw_moment <- function(distr, order) {\n#   UseMethod(\"raw_moment\")\n# }\n#\n# #' @export\n# raw_moment.sev_distr <- function(distr, order) {\n#   fun <- paste0(\"m\", get_distr(distr))\n#   do.call(fun, c(list(order = order), get_params(distr)))\n# }\n#\n# limited_moment <- function(distr, limit, order) {\n#   UseMethod(\"limited_moment\")\n# }\n#\n# #' @export\n# limited_moment.sev_distr <- function(distr, limit, order) {\n#   fun <- paste0(\"lev\", get_distr(distr))\n#   do.call(fun, c(list(limit = limit, order = order), get_params(distr)))\n# }\n#\n# ilf <- function(distr, limit, limit_ref) {\n#   limited_moment(distr, limit, order = 1) /\n#     limited_moment(distr, limit_ref, order = 1)\n# }\n\n#-----------------\n\nlist_sev_distr <- function() {\n  purrr::map_chr(dataset$distributions, 1)\n}\n\n#-----------------\n\n#' @import shiny\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Severity Distributions\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # # Input: Slider for the number of bins ----\n      # sliderInput(inputId = \"bins\",\n      #             label = \"Number of bins:\",\n      #             min = 1,\n      #             max = 50,\n      #             value = 30)\n\n      shiny::selectInput(\n        \"sev_distr\",\n        \"Select Severity Distribution\",\n        choices = list_sev_distr()\n        # choices = c(\"pareto1\", \"pareto2\", \"pareto3\", \"pareto\")\n      ),\n\n      shiny::wellPanel(\n        shiny::h5(\"Parameters:\"),\n        shiny::uiOutput(\"params\"),\n        shiny::verbatimTextOutput(\"stats\")\n      ),\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      shiny::verbatimTextOutput(\"out\")\n\n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n\n  # initial_distr <- sev_distr(\"pareto1\")\n  # initial_distr <- set_params(initial_distr, list(shape = 2, min = 999999))\n  # distr <- mod_severity_distr_server(\n  #   \"app\", initial_distr = shiny::reactiveVal(initial_distr)\n  # )\n  # output$out <- shiny::renderPrint({\n  #   str(distr())\n  # })\n  #\n  # shiny::observeEvent(initial_distr(), {\n  #   shiny::req(class(initial_distr()) == \"sev_distr\")\n  #   shiny::updateSelectInput(\n  #     session, \"sev_distr\", selected = initial_distr()$name\n  #   )\n  # })\n  #\n  # output$params <- shiny::renderUI({\n  #   shiny::req(input$sev_distr)\n  #   distr <- if (input$sev_distr == initial_distr()$name) initial_distr() else input$sev_distr\n  #   create_parameter_input(distr, ns)\n  # })\n  #\n  # parameters <- shiny::reactive({\n  #   shiny::req(input$sev_distr)\n  #   params <- get_params(input$sev_distr)\n  #   purrr::map(purrr::set_names(params), \\(x) input[[x]])\n  # })\n  #\n  # shiny::reactive({\n  #   distr <- sev_distr(input$sev_distr)\n  #   set_params(distr, parameters())\n  # })\n  # # Histogram of the Old Faithful Geyser Data ----\n  # # with requested number of bins\n  # # This expression that generates a histogram is wrapped in a call\n  # # to renderPlot to indicate that:\n  # #\n  # # 1. It is \"reactive\" and therefore should be automatically\n  # #    re-executed when inputs (input$bins) change\n  # # 2. Its output type is a plot\n  # # output$distPlot <- renderPlot({\n  #\n    # x    <- faithful$waiting\n    # bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    #\n    # hist(x, breaks = bins, col = \"#75AADB\", border = \"white\",\n    #      xlab = \"Waiting time to next eruption (in mins)\",\n    #      main = \"Histogram of waiting times\")\n    #\n    # })\n\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"DESCRIPTION","content":"Title: Hello Shiny!\nAuthor: RStudio, Inc.\nAuthorUrl: http://www.rstudio.com/\nLicense: MIT\nDisplayMode: Showcase\nTags: getting-started\nType: Shiny\n","type":"text"},{"name":"Readme.md","content":"This small Shiny application demonstrates Shiny's automatic UI updates. \n\nMove the *Number of bins* slider and notice how the `renderPlot` expression is automatically re-evaluated when its dependant, `input$bins`, changes, causing a histogram with a new number of bins to be rendered.\n","type":"text"},{"name":"distributions.yml","content":"- name: burr\n  parameters:\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.5\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1000000.0\n    min_value: 0.0\n    max_value: .inf\n- name: exp\n  parameters:\n  - name: rate\n    value: 0.0000005\n    min_value: 0.0\n    max_value: .inf\n- name: fpareto\n  parameters:\n  - name: min\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape3\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: gamma\n  parameters:\n  - name: shape\n    value: 100.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 100000.0\n    min_value: 0.0\n    max_value: .inf\n- name: genbeta\n  parameters:\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape3\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: genpareto\n  parameters:\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: invburr\n  parameters:\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: invexp\n  parameters:\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: invgamma\n  parameters:\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: invgauss\n  parameters:\n  - name: mean\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: dispersion\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: invparalogis\n  parameters:\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: invpareto\n  parameters:\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: invtrgamma\n  parameters:\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: invweibull\n  parameters:\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: lgamma\n  parameters:\n  - name: shapelog\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: ratelog\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: lgompertz\n  parameters:\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: llogis\n  parameters:\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: lnorm\n  parameters:\n  - name: meanlog\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: sdlog\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: paralogis\n  parameters:\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: pareto\n  parameters:\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: pareto1\n  parameters:\n  - name: shape\n    value: 1.1\n    min_value: 0.1\n    max_value: 10.0\n  - name: min\n    value: 100000.0\n    min_value: 0.0\n    max_value: .inf\n- name: pareto2\n  parameters:\n  - name: min\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: pareto3\n  parameters:\n  - name: min\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: pareto4\n  parameters:\n  - name: min\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: pearson6\n  parameters:\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape3\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: trbeta\n  parameters:\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape3\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: trgamma\n  parameters:\n  - name: shape1\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: shape2\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1.0\n    min_value: 0.0\n    max_value: .inf\n- name: weibull\n  parameters:\n  - name: shape\n    value: 0.5\n    min_value: 0.0\n    max_value: .inf\n  - name: scale\n    value: 1000000.0\n    min_value: 0.0\n    max_value: .inf\n","type":"text"}]
